# FIXME: Note: I have added -fno-merge-constants so that all strings
# will be placed in the .rodata section as opposed to .rodata.str1.x |
# x in uints
#
# -Xlinker -r is used to pass flags into the linker, in this case to
# prevent musllibc from creating an executable and linking in many of
# its normal symbols

include Makefile.src Makefile.comp Makefile.dependencies

# calculate the name of the final object = interface.compname.o
COMPPATH=$(subst /, ,$(shell pwd))
COMPLEN =$(words $(COMPPATH))
COMPLIST=$(wordlist $(shell echo $(COMPLEN)-1 | bc), $(COMPLEN), $(COMPPATH))
COMPNAME=$(shell echo $(strip $(COMPLIST)) | sed "s/ /./")
COMPOBJ =$(COMPNAME).o

C_OBJS  =$(patsubst %.c,%.o,$(wildcard *.c))
CXX_OBJS=$(patsubst %.cc,%.o,$(wildcard *.cc))
ASM_OBJS=$(patsubst %.S,%.o,$(wildcard *.S))
OBJS    =$(CXX_OBJS) $(C_OBJS) $(ASM_OBJS) $(OBJLIBS)
# NOTE: assembly files don't have dependencies generated for them
SOURCE_DEPENDENCIES=$(C_OBJS:%.o=%.d) $(CXX_OBJS:%.o=%.d)

# Most of the dependencies are calculated here. These include those on
# libraries (in src/components/lib/*/), and on the generic interface
# code (in src/components/interface/*/). This does *not* include the
# dependencies on the *variants* of interfaces used for a specific
# component. For that, the composer should have passed in that
# information.
INCLUDE      =$(DEPENDENCY_INCPATH) -I..
LIB_MANDATORY=$(DEPENDENCY_LIBOBJS)
# The -l (DEPENDENCY_LIBS) flags are listed twice to catch backwards
# references
LIB_FLAGS    =$(LIB_MANDATORY) $(if $(wildcard ../*.a), -L.. -linterfacelib) $(DEPENDENCY_LIBPATH) $(DEPENDENCY_LIBS) $(DEPENDENCY_LIBS)

COMP_LD_SCRIPT=$(IMPLDIR)/comp.ld
TAR_SYMBOL_NAME=crt_init.tar

ifeq ($(PLATFORM), i386)
LINKFLAG=-Xlinker -melf_i386
else ifeq ($(PLATFORM), x86_64)
LINKFLAG=-Xlinker -melf_x86_64 
else ifeq ($(PLATFORM), armv7a)
LINKFLAG=-Xlinker -marmelf
endif

.PHONY: all
all: print $(SOURCE_DEPENDENCIES) $(COMPOBJ)

.PHONY: print
print:
	$(info | Component $(COMPNAME):)

# Gather all non-interface .o files in the code (libraries and
# interfaces) together at this point
$(COMPOBJ): $(OBJS)
	$(info |     [LD]   $(COMPNAME) ($@): Linking together $^ $(LIB_MANDATORY))
	@$(LD) $(LDFLAGS) $(LIB_MANDITORY) -r -o $@ $^

# These variables direct the compilation of the component with
# specific interface variants. In contrast to the library includes
# calcuated above, this is from the composer. These variables are set
# by the highest-level make command Note that they are all passed in
# as "if_0/var_0+if_1/var_1+...", so we need to remove the + and the "
COMP_INTERFACES_CLEAN=$(strip $(subst +, ,$(subst ",,$(COMP_INTERFACES)))) #"
COMP_IFDEPS_CLEAN =$(strip $(subst +, ,$(subst ",,$(COMP_IFDEPS)))) #"
COMP_LIBDEPS_CLEAN=$(strip $(subst +, ,$(subst ", ,$(COMP_LIBDEPS)))) #"

# making the list of -L and -l based on the component's dependencies
COMP_DEPS_CLEAN      =$(foreach D,$(COMP_IFDEPS_CLEAN),$(word 1,$(subst /, ,$(D))))
COMP_DEPLIBS_CLEAN   =$(foreach D,$(COMP_DEPS_CLEAN),$(if $(wildcard $(INTERDIR)/$(D)/lib$(D).a), -l$(D)))
COMP_DEPLIBS_CLEAN  :=$(COMP_DEPLIBS_CLEAN) # handle all necessary orderings
COMP_DEPLIBDIRS_CLEAN=$(foreach D,$(COMP_DEPS_CLEAN),$(if $(wildcard $(INTERDIR)/$(D)/lib$(D).a), -L$(INTERDIR)/$(D)/))

# The actual lists of objects to be compiled with the components...
COMP_EXPIF_OBJS=$(foreach I,$(COMP_INTERFACES_CLEAN),$(INTERDIR)/$(I)/cosrt_s_stub.o)
COMP_DEP_OBJS=$(foreach D,$(COMP_IFDEPS_CLEAN),$(INTERDIR)/$(D)/cosrt_c_stub.o)

# NOTE: we're currently ignoring the *variants* library requirements,
# which will break if an interface's code requires a library

comp_header:
	$(info | Composing $(COMP_INTERFACE).$(COMP_NAME) for variable $(COMP_VARNAME) by linking with:)
	$(info |     Exported interfaces: $(COMP_INTERFACES_CLEAN))
	$(info |     Interface dependencies: $(COMP_IFDEPS_CLEAN))
	$(info |     Libraries: $(DEPENDENCY_LIBS) $(DEPENDENCY_LIBOBJS))

.PHONY: component
component: clean comp_header $(COMPOBJ)
	$(if $(COMP_INITARGS_FILE), $(CC) $(INCLUDE) $(CFLAGS) -c -o $(COMP_INITARGS_FILE:%.c=%.o) $(COMP_INITARGS_FILE))
	$(if $(COMP_TAR_FILE), cp $(COMP_TAR_FILE) $(TAR_SYMBOL_NAME))
	$(if $(COMP_TAR_FILE), $(LD) $(LDFLAGS) -r -b binary $(TAR_SYMBOL_NAME) -o $(COMP_TAR_FILE).o; rm $(TAR_SYMBOL_NAME))
	$(LD) $(LDFLAGS) -r -o $(COMPNAME).linked_libs_ifs.o $(COMPOBJ) $(COMP_EXPIF_OBJS) $(COMP_DEP_OBJS) $(if $(COMP_INITARGS_FILE), $(COMP_INITARGS_FILE:%.c=%.o)) $(if $(COMP_TAR_FILE), $(COMP_TAR_FILE).o) $(COMP_DEPLIBDIRS_CLEAN) $(COMP_DEPLIBS_CLEAN) $(LIB_FLAGS)
	$(MUSLCC) $(COMPNAME).linked_libs_ifs.o $(MUSLCFLAGS) $(LINKFLAG) -o $(COMPNAME).linked_musl.o
	$(LD) $(LDFLAGS) -Ttext=$(COMP_BASEADDR) -T $(COMP_LD_SCRIPT) -o $(COMP_OUTPUT) $(COMPNAME).linked_musl.o

%.o:%.c
	$(info |     [CC]   $<: Compiling)
	@$(CC) $(INCLUDE) $(CFLAGS) -o $@ -c $<

%.o:%.cc
	$(info |     [CXX]  $<: Compiling)
	@$(CXX) $(INCLUDE) $(LIBSTDCXXINC) $(CXXFLAGS) -o $@ -c $<

%.o:%.S
	$(info |     [AS]   Compiling assembly file $^ into $@)
	@$(AS) $(INCLUDE) $(ASFLAGS) -c -o $@ $^

# see the make manual: create the .d dependencies from include
# statements.
%.d:%.c
	@set -e; rm -f $@; \
	$(CC) -M $(INCLUDE) $(CFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.d:%.cc
	@set -e; rm -f $@; \
	$(CXX) -M $(INCLUDE) $(LIBSTDCXXINC) $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.PHONY: clean
clean:
	$(info |     [RM]   Cleaning up implementation directory for component $(COMPNAME))
	@rm -f a.out *.o *.a *.d *.d.* *~

-include $(SOURCE_DEPENDENCIES)
